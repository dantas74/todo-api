generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id
  username String
  email    String  @unique
  password String
  phone    String  @unique
  image    String?

  tasks          Task[]
  taskUser       TaskUser[]
  categories     Category[]
  friendshipsOne Friendship[] @relation("userOne")
  friendshipsTwo Friendship[] @relation("userTwo")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("users")
}

model Friendship {
  id       String  @id
  approved Boolean

  userOne   User   @relation(fields: [userOneId], references: [id], name: "userOne")
  userOneId String @map("id_user_one")

  userTwo   User   @relation(fields: [userTwoId], references: [id], name: "userTwo")
  userTwoId String @map("id_user_two")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("friendships")
}

model Category {
  id     String @id
  name   String
  colour String

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("id_user")

  tasks Task[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("categories")
}

model DefaultCriticality {
  id          String @id
  criticality String

  tasks Task[]

  @@map("default_criticality")
}

model Task {
  id          String    @id
  title       String
  description String
  deadline    DateTime?
  isFinished  Boolean   @map("is_finished")

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String @map("id_owner")

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @map("id_category")

  criticality   DefaultCriticality @relation(fields: [criticalityId], references: [id])
  criticalityId String             @map("id_default_criticality")

  taskUser TaskUser[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("tasks")
}

model TaskUser {
  user   User   @relation(fields: [userId], references: [id])
  userId String @map("id_user")

  task   Task   @relation(fields: [taskId], references: [id])
  taskId String @map("id_task")

  @@id([userId, taskId])
  @@map("aux_tasks_users")
}
