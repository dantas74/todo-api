// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @map("id_user")
  username String
  email    String  @unique
  password String
  phone    String  @unique
  image    String?

  tasks          Task[]
  categories     Category[]
  Project        Project[]
  friendshipsOne Friendship[]  @relation("userOne")
  friendshipsTwo Friendship[]  @relation("userTwo")
  userProject    UserProject[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("users")
}

model Friendship {
  id       String    @id @map("id_friendship")
  approved Boolean
  since    DateTime?

  userOne   User   @relation(fields: [userOneId], references: [id], name: "userOne")
  userOneId String @map("id_user_one")

  userTwo   User   @relation(fields: [userTwoId], references: [id], name: "userTwo")
  userTwoId String @map("id_user_two")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("friendships")
}

model Category {
  id     String @id @map("id_category")
  name   String
  colour String

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("id_user")

  tasks Task[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("categories")
}

model DefaultCriticalityLevel {
  id          String @id @map("id_default_criticality_level")
  description String

  tasks Task[]

  @@map("default_criticality_level")
}

model Task {
  id          String    @id @map("id_task")
  title       String
  description String?
  deadline    DateTime?
  isFinished  Boolean   @map("is_finished")

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String @map("id_owner")

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @map("id_category")

  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?  @map("id_project")

  criticalityLevel   DefaultCriticalityLevel @relation(fields: [criticalityLevelId], references: [id])
  criticalityLevelId String                  @map("id_default_criticality_level")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  taskProject TaskProject[]

  @@map("tasks")
}

model Project {
  id           String    @id @map("id_project")
  title        String
  deadline     DateTime
  isFinished   Boolean   @map("is_finished")
  finishedDate DateTime? @map("finished_date")

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String @map("id_owner")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  tasks       Task[]
  userProject UserProject[]
  taskProject TaskProject[]

  @@map("projects")
}

model TaskProject {
  task   Task   @relation(fields: [taskId], references: [id])
  taskId String @map("id_task")

  project   Project @relation(fields: [projectId], references: [id])
  projectId String  @map("id_project")

  @@id([taskId, projectId])
  @@map("aux_tasks_projects")
}

model UserProject {
  user   User   @relation(fields: [userId], references: [id])
  userId String @map("id_user")

  project   Project @relation(fields: [projectId], references: [id])
  projectId String  @map("id_project")

  @@id([userId, projectId])
  @@map("aux_tasks_users")
}
